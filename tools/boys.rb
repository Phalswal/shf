#!/bin/ruby
#
# Â© 2018 Sebastian Ehlert
#
# FORTRAN has limited numerical precision for most cases, since the
# numerical noise in the boys function calculation is to high for my
# application I have to calculate it on a grid in something with higher
# precision which happens to be ruby
#

# use flt to get arbitrary precision
require 'flt'
include Flt

# set the precision to a high number
DecNum.context.precision = 42 # answer to everything

# get F0, which is well defined for
# a broad range of the double precision
def boysf0(arg)
   0.5*Math::sqrt(Math::PI/arg)*Math::erf(Math::sqrt(arg))
end

# define a double factorial of odd numbers
# in arbitrary precision
def dfactorial(arg)
   DecNum((1..arg).collect{|x|2*x+1}.reduce(1,:*))
end

# define a factorial in arbitrary precision
def factorial(arg)
   DecNum((1..arg).collect{|x|x}.reduce(1,:*))
end

# define the general boys function using flt
def boysf(n,arg)
   n_max = 25
   val = DecNum(0)
   (n..n_max).each do |i|
      val = i == n ? val.add( DecNum(1).divide(dfactorial(i)) ) : \
         val.add( ((arg.multiply 2).power(i-n)).divide(dfactorial(i)) )
   end
   val = val.multiply( (-arg).exp )
end

# set up the grid
# T. Helgaker says the asymtotic formula works well for x > 19.35
# so we have to generate grid points between 0.0 and 20.0
tab=0.1
max_n = 10
max_t = (20.0/tab).round

puts "!* this file is automatically generated by boys.rb"
puts "   real(wp),parameter :: tabl = %f" % [tab]
# unfortunately the FORTRAN compiler can not crunch a >2000
# argument array constructor, so I have to use assigment via data.
# This means I cannot set the grid as parameter, which annoys me.
puts "   real(wp) :: fgrid(0:%i,0:%i)" % [max_n,max_t]
# go over all grid points
(0..max_t).each do |x|
   # for all boys functions
   arg = x*tab
   puts "   data fgrid(0:%i,%i) /  &  ! %f" % [max_n,x,arg]
   # flt can only be initialized from integers or
   # string, so print the double as string
   (0...max_n).each do |n|
      # get the value of Fn(arg) in high precision
      res = boysf(n,DecNum(arg.to_s))
      puts "   & %s_wp,  &" % [res.to_s]
   end
   res = boysf(max_n,DecNum(arg.to_s))
   puts "   & %s_wp   /" % [res.to_s]
end

