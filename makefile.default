#!/bin/env make
# 
# created by Sebastian Ehlert in March 2018 (v 2.1)
# 2.0: recreated from scratch
# 2.1: refined the generation of dependencies, since it crashed if not
#      done in the main directory
#
##############################################################################
## put all you sources here, if you do not know how this Makefiles work,    ##
## only edit here:                                                          ##
##############################################################################

# the program you want to have, eventually...
NAME := s-hf

###------------------------------------------------------------------------###
# some options first
BUILD_IN_BIN := no
DEBUG_BUILD  := yes

# beware! this means if you modify this file everything gets updated
# if you only edit this section, keeping this false might be a good idea
MAKEFILE_DEP := no

# use the dependency build, if so your source will be scanned for
# include and use statements and the results are included in this Makefile
#
# the command make depend becomes available to generate the dependency files
#
# you need the depend.rb script und a copy of ruby for this job
USE_DEPENDENCIES := yes
# also make the dependency files Makefile dependent
DEP_MAKEFILE_DEP := no

###------------------------------------------------------------------------###
# put all sources needed for the build here
# the source holding your main-program should go in OBJSP
# The numbering is abitrary, but it is garanteed that
# OBJS3 is always build before OBJS2 and so on.
OBJSP := main.o
OBJS0 := help.o\
         readin.o\
         printout.o\
         error.o\
         signal.o\
         strings.o\
         system_tools.o\
         misc.o
OBJS1 := diis.o\
         ints.o\
         stong.o\
         pop.o\
			guess.o\
         geom.o
OBJS2 := scf.o\
         mbpt.o\
         opt.o
# to be save, put your modules here
OBJS3 := precision.o\
         atomdata.o

# put all include files here (currently not used)
INC := 

# libraries, do not put the program name itself here
LIBS := mkl_blas95_lp64\
        mkl_lapack95_lp64\
        pthread\
        m

# choose your compiler here (you can choose LINUXI)
OSTYPE := LINUXI

# here resides the build system, only needed for larger projects
MAKEDIR := $(MAINDIR)
# put all files to appropiate places
EXEDIR  := $(MAINDIR)/exe
LIBDIR  := $(MAINDIR)/lib
INCDIR  := $(MAINDIR)/include
MODDIR  := $(MAINDIR)/modules
# you can use a local build directory to separate the build
# from the main program
OUTDIR  := $(MAINDIR)/build
DEPDIR  := $(MAINDIR)/.depend

##############################################################################
## and stop editing here, ;)                                                ##
##############################################################################

###------------------------------------------------------------------------###
# set the path for make to search in (normally the SRCDIR is enough):
vpath % $(SRCDIR)

###------------------------------------------------------------------------###
# to use the Intel-Compiler please set MKLROOT somewhere
ifeq ($(OSTYPE),LINUXI)
FC := ifort
CC := icc

# compile flags
FCFLAGS := -O -axAVX -qopenmp
FCFLAGS += -module $(MODDIR)
FCFLAGS += -I$(INCDIR)                       \
           -I$(MKLROOT)/include/intel64/lp64 \
           -I$(MKLROOT)/include
CCFLAGS := -O -DLINUX
CCFLAGS += -D_Float128=__float128
# check for debug build
ifeq ($(DEBUG_BUILD),yes)
FCFLAGS += -g -traceback
CCFLAGS += -g -DEBUG
endif # DEBUG

# linker
LD := ifort
# general flags for linking, this is build incremental to get an overview
LDFLAGS := -static -fopenmp
# add path to libraries
LDFLAGS += -L$(MKLROOT)/lib/intel64 \
           -L$(LIBDIR)
# add path to modules
LDFLAGS += -module $(MODDIR)
# add path to include files
LDFLAGS += -I$(MKLROOT)/include/intel64/lp64 \
           -I$(MKLROOT)/include
# add special linker options for the MKL library
LDFLAGS += -Wl,--start-group     \
              -lmkl_intel_lp64   \
              -lmkl_core         \
              -lmkl_intel_thread \
           -Wl,--end-group

endif # LINUXI
###------------------------------------------------------------------------###
# set the targets
.PHONY: all lib prog setup depend clean veryclean

# this is the first, so it will be made by default
all: setup lib prog

# we can also enforce it by
.DEFAULT_GOAL=all

###------------------------------------------------------------------------###
# generate the name of the program and the library
LIBNAME  := $(LIBDIR)/lib$(NAME).a
PROGNAME := $(EXEDIR)/$(NAME)
ifeq ($(BUILD_IN_BIN),yes)
   PROGNAME := $(HOME)/bin/$(NAME)
endif # BIN
# set up the dependencies
ifeq ($(USE_DEPENDENCIES),yes)
   DEPS := $(patsubst %.o,$(DEPDIR)/%.d,\
      $(OBJSP) $(OBJS3) $(OBJS2)  $(OBJS1) $(OBJS0))
endif # DEP
# put all objects in the build directory
OBJS3 := $(addprefix $(OUTDIR)/,$(OBJS3))
OBJS2 := $(addprefix $(OUTDIR)/,$(OBJS2))
OBJS1 := $(addprefix $(OUTDIR)/,$(OBJS1))
OBJS0 := $(addprefix $(OUTDIR)/,$(OBJS0))
OBJSP := $(addprefix $(OUTDIR)/,$(OBJSP))
# libraries
LIBS  := $(addprefix -l,$(NAME) $(LIBS))
# we merge all files for convinience
OBJS:= $(OBJSP) $(OBJS3) $(OBJS2) $(OBJS1) $(OBJS0)
# everything should also dependent on the local Makefile
ifeq ($(MAKEFILE_DEP),yes)
   MAKEDEP := Makefile
endif # DEP
ifeq ($(DEP_MAKEFILE_DEP),yes)
   DEPMAKEDEP := Makefile
endif # DEP

###------------------------------------------------------------------------###
# set up the targets for all
lib: $(LIBNAME)
prog: $(PROGNAME)
setup: $(EXEDIR) $(LIBDIR) $(MODDIR) $(OUTDIR) $(DEPDIR)

ifeq ($(USE_DEPENDENCIES),yes)
depend: $(DEPS)
endif # DEP

###------------------------------------------------------------------------###
# define how to actually generate the library and the program
$(LIBNAME): $(OBJS3) $(OBJS2) $(OBJS1) $(OBJS0)
	@echo "creating $@"                     && \
	$(AR) rv $@ $?                          && \
	echo "finished building $@ successfully"

# build everything together
$(PROGNAME): $(LIBNAME) $(OBJSP)
	@echo "linking $@"                      && \
	$(LD) $(OBJSP) $(LIBS) $(LDFLAGS) -o $@ && \
	echo "finished linking $@ successfully"

###------------------------------------------------------------------------###
# first deactivate some implicit rules
%.o : %.mod
%.f : %.F

# now the rules to actually build the object files
$(OUTDIR)/%.o: %.f $(MAKEDEP)
	@echo "making $@ from $<" && \
	$(FC) $(FCFLAGS) -c $< -o $@

$(OUTDIR)/%.o: %.f90 $(DEPDIR)/%.d $(MAKEDEP)
	@echo "making $@ from $<" && \
	$(FC) $(FCFLAGS) -c $< -o $@

$(OUTDIR)/%.o: %.c $(MAKEDEP)
	@echo "making $@ from $<" && \
	$(CC) $(CCFLAGS) -c $< -o $@


ifeq ($(USE_DEPENDENCIES),yes)
# this is a crutial part of this Makefile!
-include $(DEPS)

# now for the dependencies,
# I use a script hacked together in ruby (v 2.5.0) for this job
$(DEPDIR)/%.d: %.f90 $(DEPMAKEDEP)
	@echo "generating dependencies for $<"    && \
	deps=`ruby $(MAINDIR)/depend.rb $<`       && \
	echo "\$$(OUTDIR)/$*.o:$$deps" > $@

$(DEPDIR)/%.d: %.f $(DEPMAKEDEP)
	@echo "generating dependencies for $<"    && \
	deps=`ruby $(MAINDIR)/depend.rb $<`       && \
	echo "\$$(OUTDIR)/$*.o:$$deps" > $@

# deactivate dependency generation for C-code
$(DEPDIR)/%.d: %.c
	@echo "generating no dependencies for $<" && \
	echo "\$$(OUTDIR)/$*.o:" > $@

endif # DEP

###------------------------------------------------------------------------###
# clean up, at the right places
clean:
	$(RM) $(OUTDIR)/*.o $(MODDIR)/*.mod $(PROGNAME) $(LIBNAME)

# in case you use the dependency build you can get rid of those files to
veryclean: clean
	$(RM) $(DEPDIR)/*.d

###------------------------------------------------------------------------###
# create some directories if necressary
$(EXEDIR):
	@echo "creating a directory for the executable" && mkdir -p $@

$(LIBDIR):
	@echo "creating a directory for the libraries" && mkdir -p $@

$(MODDIR):
	@echo "creating a directory for the modules" && mkdir -p $@

$(OUTDIR):
	@echo "creating a directory for the object files" && mkdir -p $@

$(DEPDIR):
	@echo "creating a directory for the dependencies" && mkdir -p $@
